#!/usr/bin/perl

# Copyright 2010 Boris Daeppen <boris_daeppen@bluewin.ch>
# 
# This file is part of NaYaBoh.
# 
# NaYaBoh is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# NaYaBoh is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NaYaBoh.  If not, see <http://www.gnu.org/licenses/>.


# TODO
#  * nice shell output
#  * error handling (maybe just abort. ore just ignore and take the time?)


use strict;
use warnings;
use Time::HiRes qw(time);
use GD::Graph::lines;   # uses libgd-graph-perl

$| = 1; # disable print buffer of Perl

# nasty handling of commandline arguments
if (not exists $ARGV[0]) {
    print "give the number of test cycles as argument.\nTry '-h' for help.\nABORTING\n";
    exit 1;
}
elsif ($ARGV[0] =~ /-h/) {
    print "\nUse this program only if you know what you do.\nFor documentation see the source code.\n\nThis program downloads some web pages and calculates the time consumed.\n\n";
    print "\nEXAMPLES:\n\n\tnayaboh_benchmark 2      # run with 2 cycles\n\tnayaboh_benchmark 2 -s   # same but sort the output\n\n";
    exit 1;
}
elsif ($ARGV[0] =~ /[^0-9]/) {
    print "argument must be a number.\nABORTING\n";
    exit 1;
}

# initialise things I need
my $rounds = $ARGV[0];
my $highest = 0;
my @time_proxy = ();
my @time_noproxy = ();

my @pages = (   'http://opensource.org/',
                'http://www.gnu.org/',
                'http://home.gna.org/nayaboh/',
                'http://nayaboh.sourceforge.net/'
                );


# loop through all pages, download them
for (my $i=1;$i<=$rounds;$i++) {
    #
    foreach my $url (@pages) {

        my $start = time();
        print "PROXY\tRound $i:\ttry to receive $url...";
        ask_nayaboh($url);
        my $end = time();
        my $duration = sprintf("%.1f", ($end - $start));
        push (@time_proxy, $duration);
        if ($duration > $highest) { $highest = $duration; }
        print "\tDONE\t$duration sec\n";


        $start = time();
        print "DIRECT\tRound $i:\ttry to receive $url...";
        ask_internet($url);
        $end = time();
        $duration = sprintf("%.1f", ($end - $start));
        push (@time_noproxy, $duration);
        if ($duration > $highest) { $highest = $duration; }
        print "\tDONE\t$duration sec\n";

    }
}


my $graph = GD::Graph::lines->new(800, 400);

$graph->set( 
    x_label           => "$rounds x downloading of ".scalar @pages." web pages",
    y_label           => 'Time',
    title             => "Network Caching Benchmark",
    y_max_value       => (int(($highest+4)/5)*5), # e.g: 23 -> 25
    line_width        => 2,
    #y_tick_number     => 1,
    #y_label_skip      => 1 
) or die $graph->error;

# if there is any second argument, preferable (-s)
# the values should be sorted
if (exists $ARGV[1]) {
    my @sorted_time_proxy   = sort {$a <=> $b } @time_proxy;
    my @sorted_time_noproxy = sort {$a <=> $b } @time_noproxy;
    @time_proxy   = @sorted_time_proxy;
    @time_noproxy = @sorted_time_noproxy;
}

my @data = (    [1 .. ($rounds * scalar @pages)],
                \@time_noproxy,
                \@time_proxy );

#use Data::Dumper;
#print Dumper(\@data);

$graph->set_legend_font('GD::gdMediumBoldFont');
$graph->set_legend('Direct', 'NaYaBoh');
my $gd = $graph->plot( \@data ) or die $graph->error;

# add some additional information to the chart
my $hostname = `uname -n`;
my $date     = `date`;
my $uptime   = `uptime | cut -d, -f1 | cut -d' ' -f1-3 --complement`;
my $RX;
my $TX;
# read from config file
my $internet=`grep internet-interface /etc/nayaboh.conf | cut -d\= -f2`; chomp ($internet);
my $localnet=`grep internal-interface /etc/nayaboh.conf | cut -d\= -f2`; chomp ($localnet);

if (defined $ENV{'DISPLAY'} and $ENV{'DISPLAY'} =~ /:/) {

    $RX       = `gksudo ifconfig $internet | grep 'RX bytes' | cut -d: -f2 | cut -d')' -f1 | cut -d'(' -f2`;
    $TX       = `gksudo ifconfig $localnet | grep 'TX bytes' | cut -d: -f3 | cut -d')' -f1 | cut -d'(' -f2`;
}
else {
    $RX       = `sudo ifconfig $internet | grep 'RX bytes' | cut -d: -f2 | cut -d')' -f1 | cut -d'(' -f2`;
    $TX       = `sudo ifconfig $localnet | grep 'TX bytes' | cut -d: -f3 | cut -d')' -f1 | cut -d'(' -f2`;
}
my $version  = `dpkg -l nayaboh | tail -n 1 | awk '{ print \$3 }'`;
chomp ($hostname);
chomp ($date);
chomp ($uptime);
chomp ($RX);
chomp ($TX);
chomp ($version);
use GD;
$gd->string(gdSmallFont,60,40,"$hostname, $uptime uptime",1);
$gd->string(gdSmallFont,60,60,"$RX from Internet",1);
$gd->string(gdSmallFont,60,80,"$TX to Clients",1);
$gd->string(gdTinyFont,10,390,$date,1);
$gd->string(gdTinyFont,670,390,"created by NaYaBoh v$version",1);

# print the chart to file
open(IMG, '>NaYaBoh_Benchmark.png') or die $!;
binmode IMG;
print IMG $gd->png;
close IMG;

# try to display picture, or give message
`firefox NaYaBoh_Benchmark.png || iceweasel NaYaBoh_Benchmark.png || epiphany NaYaBoh_Benchmark.png || echo '### SEE PICTURE ./NaYaBoh_Benchmark.png'`;





sub ask_nayaboh {

    my $url = shift;

    `export http_proxy=192.168.111.1:3128 && wget --page-requisites --no-check-certificate --delete-after --directory-prefix /tmp/NaYaBoh --proxy=on $url`;
}

sub ask_internet {

    my $url = shift;

    `wget --page-requisites --delete-after --no-check-certificate --directory-prefix /tmp/NaYaBoh --no-proxy $url`;

}


# That is how it should be.
# But I had problems with the request-method using IP
# from: http://tomacorp.com/perl/lwp.html
# 
# #!/usr/bin/perl
# 
# use strict;
# use LWP::UserAgent;
# my $content;
# 
# my $ua = new LWP::UserAgent;
# 
# # Various enhancement possibilities:
# # $ua->max_size(100000);  # 100k byte limit
# # $ua->timeout(3);        # 3 sec timeout is default
# # $ua->proxy(['http'], 'http://myproxy.mycorp.com/');  # set proxy
# # $ua->env_proxy()        # load proxy info from environment variables
# # $ua->no_proxy('localhost', 'mycorp.com');   # No proxy for local machines
# 
# $ua->agent("Mozilla/6.0");  # Or something equally mysterious
# 
# my $req = new HTTP::Request GET => 'http://mycorp.com/';
# my $res = $ua->request($req);
#  
# if ($res->is_success) 
# {
#   $content= $res->content;
# } 
# else 
# {
#   die "Could not get content";
# }

__END__

=head1 NAME

nayaboh_benchmark - a proxy benchmark script

=head1 SYNOPSIS

Use this script on command line.

This creates an average graphic:

    nayaboh_benchmark 3

If you want to have an ordered graph, add an option:

    nayaboh_benchmar 3 -s

=head1 DESCRIPTION

This script belongs to the nayaboh package. It tests the local installed internet proxy and creates a graphic out of the results. It does so, by downloading webpages.

NOTE: At this version the env $http_proxy is set to a certain value. So it only works with the nayaboh-package. This is a TODO and should be changed in later versions.

=head1 LICENSE

This script is released under the GPL version 3.

=head1 AUTHOR

Boris Daeppen - boris_daeppen@bluewin.ch

=head1 SEE ALSO

L<http://sourceforge.net/projects/nayaboh>, L<http://nayaboh.sourceforge.net>

=cut

